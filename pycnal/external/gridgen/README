gridgen
Orthogonal Grid Generator
Version 1.47

Provides orthogonal grid generation utility `gridgen'.

`gridgen' is a free software. See LICENSE for details.

Please send comments and bugs to pavel.sakov<at>gmail.com .

1. Build and install

The code is being developed and used under Linux/gcc/i386 platform and 
essentially uses the C99 complex arithmetics available on this platform.

To compile it `gridgen', run:

./configure
make
(make install)

2. Portability

This code should compile on all platforms with gcc. It is known to compile 
on Linux/gcc/i386, Cygwin/gcc/i386, Djgpp/gcc/i386, and SunOS/gcc/sparc.
On Linux/gcc/ia64 you may need to remove the optimisation flag -O2.
Make sure that you use GNU make.

3. Documentation

At the moment, there is not much documentation with `gridgen'.
To get familiar with it, I would suggest the following sequence:

  1. Read this file
  2. Compile `gridgen'
  3. Read examples/README
  4. Reproduce examples
  5. Read output after running "gridgen -a" and "gridgen -h"
  6. There are a number of real-life grid examples on
     http://code.google.com/p/gridgen-c/downloads/list

4. Features.

Following is a list of some particular features of `gridgen', to indicate 
what it can do and what it can not.

  1. `gridgen' generates a grid based on the domain boundary and designated
     locations of the grid corners.
  2. `gridgen' can handle simply connected regions only. If you have a region
     with islands or re-connecting channels, you have to use masking.
  3. Unlike many other generators, `gridgen' allows multiple corners (rather 
     than just 4 corners) in grid space.
  4. Unlike many other generators, `gridgen' does not allow to specify cell 
     size explicitely. One can influence the cell density by:

     A. Changing positions of the corners.

        Compare grids for examples 1 and 2 from the package; they demonstrate
        how the cell density can be changed via the positions of the grid 
	corners.

     B. By specifying node coordinates in grid space.

        This is done via the entry `grid' in the parameter file. This entry
        points at the file that contains node coordinates in index space scaled
        to 1x1 square. Two examples of using this technique may be seen at

        http://docs.google.com/gb?export=download&id=F.8459b230-8260-433a-9f52-d63670ae317c

        (note elongated cells in the river); and

	http://docs.google.com/gb?export=download&id=F.22d1155f-66b7-4881-9a21-ff14f31a383d

        (note the elongated cells in the narrowing).

	Also, see example 6.

     Despite the flexibility of `gridgen', it is still difficult or impossible
     at times to achieve some specific grid characteristics for regions far from
     the boundary. This particularly refers to the alignment of the grid cells
     in a certain (flow) direction or to obtainining the desired cell density.

  5. Because `gridgen' is based on the (exact) Schwarz-Christoffel formula,
     it performs fast and is numerically robust.

  6. Beware that each boundary vertex represents a singularity in the
     Scwartz-Christoffel transform. To generate a smoother grid, for a section
     of the boundary without corners (which will become a strait line in the 
     grid space), try to make the polygon section smoother; using a few smaller
     turns instead of one sharp turn; or move the boundary polyline away from
     the water. Try to make the angles in the boundary polyline at the location
     of designated grid corners close to the right angle.

  7. To generate a grid with aspect ratio close to 1, look at the value of 
     "conformal modulus" reported in the log generated by `gridgen' with "-v"
     option, and make the ratio (ny - 1) / (nx - 1) close to this number.

5. Acknowledgments

`gridgen' uses the following public code/algorithms:
  1. CRDT algorithm by Tobin D. Driscoll and Stephen A. Vavasis -- for
     conformal mapping.
  2. `Triangle' by Jonathan Richard Shewchuk -- for Delaunay triangulation.
  3. `SCPACK' by Lloyd N. Trefethen -- for Schwarz-Christoffel transform.
  4. `DOPRI8' by E. Hairer, S.P. Norsett, G. Wanner -- for solving ODEs.
  5. Shamos-Hoey algorithm prototype by softSurfer -- for testing a polyline on
     self-intersections.

Please acknowledge the use of this software in publications.

Good luck!
Pavel Sakov
